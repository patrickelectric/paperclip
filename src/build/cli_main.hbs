
use self::client::\{ApiClient, ApiError, Response};
use self::util::ResponseStream;
use anyhow::Error;
use clap::\{App, ArgMatches};
use openssl::pkcs12::Pkcs12;
use openssl::pkey::PKey;
use openssl::x509::X509;

use std::fs::File;
use std::io::Read;
use std::path::Path;

#[derive(Debug, thiserror::Error)]
#[allow(dead_code)]
enum ClientError \{
    #[error("Duration parse error: \{}", _0)]
    Duration(humantime::DurationError),
    #[error("I/O error: \{}", _0)]
    Io(std::io::Error),
    #[error("OpenSSL error: \{}", _0)]
    OpenSsl(openssl::error::ErrorStack),
    #[error("Client error: \{}", _0)]
    Reqwest(reqwest::Error),
    #[error("URL error: \{}", _0)]
    Url(url_dep::ParseError),
    #[error("\{}", _0)]
    Api(self::client::ApiError<reqwest::Response>),
    #[error("")]
    Empty,
}

impl From<ApiError<reqwest::Response>> for ClientError \{
    fn from(e: ApiError<reqwest::Response>) -> Self \{
        ClientError::Api(e)
    }
}

fn read_file<P: AsRef<Path>>(path: P) -> Result<Vec<u8>, Error> \{
    let mut data = vec![];
    let mut fd = File::open(path.as_ref()).map_err(ClientError::Io)?;
    fd.read_to_end(&mut data).map_err(ClientError::Io)?;
    Ok(data)
}

#[derive(Clone)]
struct WrappedClient \{
    verbose: bool,
    inner: reqwest::Client,
    url: reqwest::Url,
}

#[async_trait::async_trait]
impl ApiClient for WrappedClient \{
    type Request = reqwest::RequestBuilder;
    type Response = reqwest::Response;

    async fn make_request(&self, req: Self::Request) -> Result<Self::Response, ApiError<Self::Response>> \{
        let req = req.build().map_err(ApiError::Reqwest)?;
        if self.verbose \{
            println!("\{} \{}", req.method(), req.url());
        }

        Ok(self.inner.execute(req).await.map_err(ApiError::Reqwest)?)
    }

    fn request_builder(&self, method: http::Method, rel_path: &str) -> Self::Request \{
        let mut u = self.url.clone();
        let mut path = u.path().trim_matches('/').to_owned();
        if !path.is_empty() \{
            path = String::from("/") + &path;
        }

        path.push_str(rel_path);
        u.set_path(&path);
        self.inner.request(method, u)
    }
}

fn make_client<'a>(matches: &'a ArgMatches<'a>) -> Result<WrappedClient, Error> \{
    let mut client = reqwest::Client::builder();

    if let Some(p) = matches.value_of("ca-cert") \{
        let ca_cert = X509::from_pem(&read_file(p)?)
            .map_err(ClientError::OpenSsl)?;
        let ca_der = ca_cert.to_der().map_err(ClientError::OpenSsl)?;
        client = client.add_root_certificate(
            reqwest::Certificate::from_der(&ca_der)
                .map_err(ClientError::Reqwest)?
        );
    }

    // FIXME: Is this the only way?
    if let (Some(p1), Some(p2)) = (matches.value_of("client-key"), matches.value_of("client-cert")) \{
        let cert = X509::from_pem(&read_file(p2)?).map_err(ClientError::OpenSsl)?;
        let key = PKey::private_key_from_pem(&read_file(p1)?)
            .map_err(ClientError::OpenSsl)?;
        let builder = Pkcs12::builder();
        let pkcs12 = builder.build("foobar", "my-client", &key, &cert)
            .map_err(ClientError::OpenSsl)?;
        let identity = reqwest::Identity::from_pkcs12_der(
            &pkcs12.to_der().map_err(ClientError::OpenSsl)?,
            "foobar"
        ).map_err(ClientError::Reqwest)?;
        client = client.identity(identity);
    }

    if let Some(timeout) = matches.value_of("timeout") \{
        let d = timeout.parse::<humantime::Duration>()?;
        client = client.timeout(d.into());
    }

    let is_verbose = matches.is_present("verbose");
    let url = matches.value_of("url").expect("required arg URL?");
    Ok(WrappedClient \{
        inner: client.build().map_err(ClientError::Reqwest)?,
        url: reqwest::Url::parse(url).map_err(ClientError::Url)?,
        verbose: is_verbose,
    })
}

async fn run_app() -> Result<(), Error> \{
    let yml = load_yaml!("app.yaml");
    let app = App::from_yaml(yml);
    let matches = app.get_matches();
    let (sub_cmd, sub_matches) = matches.subcommand();

    let client = make_client(&matches)?;
    let response = self::cli::fetch_response(&client, &matches, sub_cmd, sub_matches).await?;

    let status = response.status();
    if client.verbose \{
        println!("\{}", status);
    }

    let mut stdout = tokio::io::stdout();
    ResponseStream(response.stream()).to_writer(&mut stdout).await?;
    if !status.is_success() \{
        Err(ClientError::Empty)?
    }

    Ok(())
}

#[tokio::main]
async fn main() \{
    env_logger::init();
    if let Err(e) = run_app().await \{
        println!("\{}", e);
    }
}
